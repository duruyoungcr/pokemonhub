{"version":3,"sources":["ColorModeSwitcher.js","components/Header/index.js","components/Footer/index.js","components/Loader/index.js","components/PokemonCard/index.js","components/ResultList/index.js","components/SearchInput/index.js","request.js","components/UserTeamList/index.js","components/TeamNameModal/index.js","components/Main/index.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","pos","zIndex","right","top","Header","headingColor","as","justify","align","p","Footer","footerColor","footerBackgroundColor","bottom","left","bg","fontWeight","href","target","rel","Loader","spinnerColor","PokemonCard","pokemon","addToTeam","processing","team","removeFromTeam","nameColor","inTeam","filter","teamMember","id","length","useEffect","pt","pb","borderWidth","display","flexDirection","borderRadius","overflow","mx","src","sprites","other","front_default","alt","name","boxSize","objectFit","mt","colorScheme","orientation","height","px","py","minW","mb","textTransform","mr","d","types","map","type","alignItems","slot","abilities","ability","weight","isFullWidth","isLoading","ResultList","loading","my","justifyContent","minH","SearchInput","getPokemon","useState","query","setQuery","inputFocusColor","focusBorderColor","placeholder","onChange","e","value","ml","fetchPokemon","a","fetch","toLowerCase","response","json","UserTeamList","gap","TeamNameModal","isOpen","onClose","createTeam","initialRef","useRef","setName","isCentered","initialFocusRef","motionPreset","ref","Main","setLoading","showUserTeam","setShowUserTeam","JSON","parse","localStorage","getItem","setTeam","setProcessing","setPokemon","toast","useToast","useDisclosure","onOpen","setTimeout","title","description","status","duration","isClosable","push","setItem","stringify","removeItem","maxW","App","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.552b1c25.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      pos=\"fixed\"\n      zIndex={2}\n      right={4}\n      top={4}\n      {...props}\n    />\n  );\n};\n","import { Flex, Heading, useColorModeValue } from \"@chakra-ui/react\"\r\n\r\n\r\n\r\n\r\nconst Header = () => {\r\n    const headingColor = useColorModeValue('#1A202C', 'tomato');\r\n    return (\r\n        <Flex as='header' justify=\"center\" align='center' color={headingColor} p={4}>\r\n            <Heading as='h1' size='4xl'>Pokemon Hub</Heading>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { Flex, Text, useColorModeValue } from \"@chakra-ui/react\"\r\n\r\nconst Footer = () => {\r\n    const footerColor = useColorModeValue('#1A202C', 'tomato');\r\n    const footerBackgroundColor = useColorModeValue('white', '#1A202C');\r\n    return (\r\n        <Flex\r\n            justify='center'\r\n            align='center'\r\n            color={footerColor}\r\n            p={2}\r\n            pos=\"fixed\"\r\n            zIndex={2}\r\n            bottom={0}\r\n            right={0}\r\n            left={0}\r\n            as='footer'\r\n            bg={footerBackgroundColor}\r\n        >\r\n            <Text fontWeight='medium'>made with ❤️ by <a href=\"https://github.com/duruyoungcr\" target=\"_blank\" rel=\"noreferrer\">ray</a></Text>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import { Spinner, useColorModeValue } from \"@chakra-ui/react\";\r\n\r\nconst Loader = ({ size }) => {\r\n    const spinnerColor = useColorModeValue('teal', 'tomato');\r\n    return (\r\n        <Spinner color={spinnerColor} size={size} />\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import { Badge, Box, Button, Center, Divider, Flex, Image, Spacer, Text, useColorModeValue } from \"@chakra-ui/react\"\r\nimport { useEffect } from \"react\"\r\n\r\nconst PokemonCard = ({ pokemon, addToTeam, processing, team, removeFromTeam }) => {\r\n    const nameColor = useColorModeValue('teal', 'tomato')\r\n    let inTeam = team?.filter(teamMember => teamMember.id === pokemon.id).length > 0\r\n    useEffect(() => {\r\n        inTeam = team?.filter(teamMember => teamMember.id === pokemon.id).length > 0\r\n    }, [team])\r\n    return (\r\n        <>\r\n            {pokemon &&\r\n                <Box\r\n                    pt={2}\r\n                    pb={[0, 0, 2]}\r\n                    borderWidth=\"1px\"\r\n                    display={['flex']}\r\n                    flexDirection={['column', 'column', 'row']}\r\n                    borderRadius=\"lg\"\r\n                    overflow=\"hidden\"\r\n                >\r\n                    <Image mx={'auto'} src={pokemon?.sprites.other['dream_world'].front_default} alt={pokemon?.name} boxSize={[\"200px\", '300px']}\r\n                        objectFit=\"contain\" />\r\n                    <Divider mt={[2, 2, 0]} colorScheme=\"teal\" orientation='horizontal' display={['block', 'block', 'none']} />\r\n                    <Center height=\"300px\" display={['none', 'none', 'block']}>\r\n                        <Divider orientation=\"vertical\" />\r\n                    </Center>\r\n                    <Box px=\"6\" py=\"4\" minW={['100%', '100%', '50%']}>\r\n                        <Flex mb={[2, 4, 6]} justify=\"between\">\r\n                            <Box\r\n                                fontWeight=\"bold\"\r\n                                as=\"h4\"\r\n                                textTransform='capitalize'\r\n                                color={nameColor}\r\n                                fontSize={['16px', '24px']}\r\n                                mr={[0, 0, 2]}\r\n                            >\r\n                                {pokemon.name}\r\n                            </Box>\r\n                            <Spacer />\r\n                            <Box d=\"flex\" align='center'>\r\n                                {pokemon?.types?.map(({ type }) => (\r\n                                    <Badge mx={1} key={type.slot} display='flex' justify=\"center\" alignItems=\"center\" borderRadius={[\"full\", '3xl']} px={[\"2\", '4']} fontSize={['10px', '14px']} colorScheme=\"teal\" variant=\"subtle\" >\r\n                                        {type.name}\r\n                                    </Badge>\r\n                                ))}\r\n                            </Box>\r\n                        </Flex>\r\n                        <Box mb={[1, 3]}>\r\n                            <Text mb={[1, 2]} fontSize={['12px', '16px']} fontWeight=\"medium\" color='teal'>Ability</Text>\r\n                            <Box\r\n                                color=\"gray.500\"\r\n                                fontWeight=\"semibold\"\r\n                                fontSize={[\"xs\", \"md\"]}\r\n                                d=\"flex\" align='center'\r\n                                textTransform='capitalize'\r\n                            >\r\n                                {pokemon?.abilities?.map(({ ability }) => (\r\n                                    <Text mr={2} key={ability.slot}>\r\n                                        {ability.name}\r\n                                    </Text>\r\n                                ))}\r\n                            </Box>\r\n                        </Box>\r\n                        <Box >\r\n                            <Text mb={[1, 2]} fontSize={['12px', '16px']} fontWeight=\"medium\" color='teal'>Body</Text>\r\n                            <Box\r\n                                color=\"gray.500\"\r\n                                fontWeight=\"semibold\"\r\n                                fontSize={[\"xs\", \"md\"]}\r\n                                d=\"flex\" align='center'\r\n                                textTransform='capitalize'\r\n                            >\r\n                                <Text mr={2}>\r\n                                    height - {pokemon.height}m\r\n                                </Text>\r\n                                <Text >\r\n                                    weight - {pokemon.weight}g\r\n                                </Text>\r\n                            </Box>\r\n                        </Box>\r\n                        {inTeam ?\r\n                            <Button\r\n                                onClick={() => removeFromTeam(pokemon)}\r\n                                mt={[4, 8]} size=\"md\"\r\n                                isFullWidth\r\n                                variant=\"solid\"\r\n                                fontSize={[\"12px\", '14px']}\r\n                                isLoading={processing === pokemon.id ? true : false}\r\n                                bg={'tomato'}\r\n                            >\r\n                                Remove from team\r\n                            </Button> :\r\n                            <Button\r\n                                onClick={() => addToTeam(pokemon)}\r\n                                mt={[4, 8]} size=\"md\"\r\n                                isFullWidth\r\n                                colorScheme=\"teal\"\r\n                                variant=\"solid\"\r\n                                fontSize={[\"12px\", '14px']}\r\n                                isLoading={processing === pokemon.id ? true : false}\r\n                            >\r\n                                Add to team\r\n                            </Button>\r\n                        }\r\n                    </Box>\r\n                </Box>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PokemonCard\r\n","import { Box } from \"@chakra-ui/react\"\r\nimport { useEffect } from \"react\"\r\nimport Loader from \"../Loader\"\r\nimport PokemonCard from \"../PokemonCard\"\r\n\r\nconst ResultList = ({ loading, pokemon, addToTeam, processing, team, removeFromTeam }) => {\r\n    useEffect(() => {\r\n\r\n    }, [pokemon, loading, team])\r\n    return (\r\n        <>\r\n            {loading ?\r\n                <Box my={4} display='flex' justifyContent='center' alignItems='center' minH={['200px', '400px']} minW={'inherit'}>\r\n                    <Loader size={'xl'} />\r\n                </Box>\r\n                :\r\n                <Box my={4}>\r\n                    <PokemonCard\r\n                        pokemon={pokemon}\r\n                        addToTeam={addToTeam}\r\n                        processing={processing}\r\n                        team={team}\r\n                        removeFromTeam={removeFromTeam}\r\n                        key={team}\r\n                    />\r\n                </Box>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default ResultList\r\n","import { Box, Button, Input, useColorModeValue } from \"@chakra-ui/react\"\r\nimport { useState } from \"react\";\r\n\r\nconst SearchInput = ({ getPokemon }) => {\r\n    const [query, setQuery] = useState('')\r\n    const inputFocusColor = useColorModeValue('#515251', '#E2E8F0');\r\n    const handleInputChange = (e) => {\r\n        setQuery(e.target.value)\r\n    }\r\n    return (\r\n        <Box display={'flex'} flexDirection={['column', 'row']} mb={[2, 4, 8]}>\r\n            <Input\r\n                focusBorderColor={inputFocusColor}\r\n                size=\"lg\"\r\n                type=\"text\"\r\n                placeholder=\"Enter a pokemon name...\"\r\n                onChange={handleInputChange}\r\n                value={query}\r\n            />\r\n            <Button\r\n                onClick={() => getPokemon(query)}\r\n                mt={[4, 0]} size=\"md\"\r\n                minW={[120, 120, 150]}\r\n                colorScheme=\"teal\"\r\n                variant=\"solid\"\r\n                fontSize={[\"12px\", '14px']}\r\n                minH={'48px'}\r\n                ml={[0, 2]}\r\n            >\r\n                Search\r\n            </Button>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchInput\r\n","const BASE_URL = 'https://pokeapi.co/api/v2/pokemon/'\r\n\r\nexport const fetchPokemon = async (name) => {\r\n    const response = await fetch(`${BASE_URL}${name.toLowerCase()}`);\r\n    const pokemon = await response.json();\r\n    return pokemon;\r\n}","import { Box, Grid } from \"@chakra-ui/react\"\r\nimport { useEffect } from \"react\"\r\nimport PokemonCard from \"../PokemonCard\"\r\n\r\nconst UserTeamList = ({ addToTeam, processing, team, removeFromTeam }) => {\r\n    useEffect(() => {\r\n\r\n    }, [team])\r\n    return (\r\n        <Box my={4}>\r\n            <Grid gap={2}>\r\n                {team?.map(pokemon => (\r\n                    <PokemonCard\r\n                        pokemon={pokemon}\r\n                        key={pokemon.id}\r\n                        addToTeam={addToTeam}\r\n                        processing={processing}\r\n                        team={team}\r\n                        removeFromTeam={removeFromTeam}\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default UserTeamList\r\n","import { Button, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay } from \"@chakra-ui/react\"\r\nimport { useRef, useState } from \"react\"\r\n\r\nconst TeamNameModal = ({ isOpen, onClose, createTeam }) => {\r\n    const initialRef = useRef()\r\n    const [name, setName] = useState('')\r\n    const handleInputChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n    return (\r\n        <Modal\r\n            isCentered\r\n            initialFocusRef={initialRef}\r\n            isOpen={isOpen}\r\n            onClose={onClose}\r\n            motionPreset=\"slideInBottom\"\r\n        >\r\n            <ModalOverlay />\r\n            <ModalContent mx={4}>\r\n                <ModalHeader>Create your Team</ModalHeader>\r\n                <ModalCloseButton />\r\n                <ModalBody pb={6}>\r\n                    <FormControl>\r\n                        <FormLabel>Team name</FormLabel>\r\n                        <Input ref={initialRef} placeholder=\"Enter team name\" value={name} onChange={handleInputChange} />\r\n                    </FormControl>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button onClick={() => createTeam(name)} colorScheme=\"teal\" mr={3}>\r\n                        Save\r\n                    </Button>\r\n                    <Button onClick={onClose}>Cancel</Button>\r\n                </ModalFooter>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default TeamNameModal\r\n","import { useState, useEffect } from 'react'\r\nimport { Box, Button, useColorModeValue, useDisclosure, useToast } from \"@chakra-ui/react\"\r\nimport ResultList from \"../ResultList\";\r\nimport SearchInput from '../SearchInput';\r\nimport { fetchPokemon } from \"../../request\";\r\nimport UserTeamList from '../UserTeamList';\r\nimport TeamNameModal from '../TeamNameModal';\r\n\r\nconst Main = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [showUserTeam, setShowUserTeam] = useState(false)\r\n    const [team, setTeam] = useState(JSON.parse(localStorage.getItem('team')))\r\n    const [processing, setProcessing] = useState('')\r\n    const [pokemon, setPokemon] = useState('')\r\n    const toast = useToast();\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const footerBackgroundColor = useColorModeValue('white', '#1A202C');\r\n    useEffect(() => {\r\n        team.length < 1 && setShowUserTeam(false);\r\n    }, [team])\r\n    const getPokemon = async (query) => {\r\n        if (query) {\r\n            setLoading(true)\r\n            try {\r\n                const pokemon = await fetchPokemon(query)\r\n                setPokemon(pokemon);\r\n                pokemon && setTimeout(() => {\r\n                    setLoading(false)\r\n                }, 2000);\r\n            } catch (error) {\r\n                toast({\r\n                    title: 'An error occurred',\r\n                    description: \"Couldn't find a Pokemon with that name\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                })\r\n                setLoading(false)\r\n            }\r\n        }\r\n        else {\r\n            toast({\r\n                title: \"Not allowed!\",\r\n                description: \"Please enter a name\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const addToTeam = (pokemon) => {\r\n        if (!localStorage.getItem('teamName')) {\r\n            onOpen()\r\n        }\r\n        else {\r\n            setProcessing(pokemon.id)\r\n            let team = []\r\n            if (localStorage.getItem('team')) {\r\n                const team = JSON.parse(localStorage.getItem('team'))\r\n                team.length < 6 ? team.push(pokemon) : toast({\r\n                    title: \"An error occurred.\",\r\n                    description: \"Maximum number of 6 team members\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                })\r\n                localStorage.setItem('team', JSON.stringify(team))\r\n                setTimeout(() => {\r\n                    setTeam(team)\r\n                }, 3000);\r\n            }\r\n            else {\r\n                team.push(pokemon)\r\n                localStorage.setItem('team', JSON.stringify(team))\r\n                setTimeout(() => {\r\n                    setTeam(team)\r\n                }, 3000);\r\n            }\r\n            setTimeout(() => {\r\n                setProcessing('')\r\n            }, 3000);\r\n        }\r\n    }\r\n    const removeFromTeam = (pokemon) => {\r\n        setProcessing(pokemon.id)\r\n        const team = JSON.parse(localStorage.getItem('team')).filter(teamMember => teamMember.id !== pokemon.id)\r\n        localStorage.setItem('team', JSON.stringify(team));\r\n        team.length < 1 && localStorage.removeItem('teamName')\r\n        setTimeout(() => {\r\n            setTeam(team)\r\n            setProcessing('')\r\n        }, 3000);\r\n    }\r\n\r\n    const createTeam = (name) => {\r\n        if (!name) {\r\n            toast({\r\n                title: \"Not allowed!\",\r\n                description: \"Please enter a team name\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n            })\r\n        }\r\n        else {\r\n            localStorage.setItem('teamName', JSON.stringify(name));\r\n            addToTeam(pokemon);\r\n            onClose()\r\n        }\r\n    }\r\n    return (\r\n        <Box as='main' mx='auto' maxW='4xl' px={[4, 8]} py={4} mb={24}>\r\n            {!showUserTeam ?\r\n                <>\r\n                    <SearchInput getPokemon={getPokemon} />\r\n                    <ResultList\r\n                        team={team}\r\n                        processing={processing}\r\n                        loading={loading}\r\n                        pokemon={pokemon}\r\n                        addToTeam={addToTeam}\r\n                        removeFromTeam={removeFromTeam}\r\n                    />\r\n                    <TeamNameModal isOpen={isOpen} onClose={onClose} createTeam={createTeam} />\r\n                    {team.length > 0 &&\r\n                        <Box\r\n                            my={[4, 8]}\r\n                            fontSize={[\"12px\", '14px']}\r\n                            pos=\"fixed\"\r\n                            zIndex={2}\r\n                            bottom={6}\r\n                            right={[4, 8]}\r\n                            left={[4, 8]}\r\n                            variant=\"outline\"\r\n                            bg={footerBackgroundColor}\r\n                            py={2}\r\n                        >\r\n                            <Button\r\n                                onClick={() => setShowUserTeam(true)}\r\n                                colorScheme=\"teal\"\r\n                                isFullWidth\r\n                                variant=\"outline\"\r\n                            >\r\n                                View your team\r\n                            </Button>\r\n                        </Box>\r\n                    }\r\n                </> :\r\n                <>\r\n                    <UserTeamList\r\n                        team={team}\r\n                        addToTeam={addToTeam}\r\n                        removeFromTeam={removeFromTeam}\r\n                        processing={processing}\r\n                    />\r\n                    <Box\r\n                        my={[4, 8]}\r\n                        fontSize={[\"12px\", '14px']}\r\n                        pos=\"fixed\"\r\n                        zIndex={2}\r\n                        bottom={6}\r\n                        right={[4, 8]}\r\n                        left={[4, 8]}\r\n                        py={2}\r\n                        bg={footerBackgroundColor}\r\n                    >\r\n                        <Button\r\n                            onClick={() => setShowUserTeam(false)}\r\n                            colorScheme=\"teal\"\r\n                            isFullWidth\r\n                            variant=\"outline\"\r\n                        >\r\n                            Return to search\r\n                        </Button>\r\n                    </Box>\r\n                </>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Header />\n      <ColorModeSwitcher />\n      <Main />\n      <Footer />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}